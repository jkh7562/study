n = 0		50	//초기 함수
end = 8
mid = 6
mid - 1 = 5

-------------------------------TF(n + 1, mid - 1) 50의 왼쪽 자손
n = 1		30
end = 5
mid = 5
mid - 1 = 4

-------------------------------TF(n + 1, mid - 1) 30의 왼쪽 자손
n = 2		24
end = 4
mid = 4
mid - 1 = 3

-------------------------------TF(n + 1, mid - 1) 24의 왼쪽 자손
n = 3		5
end = 3
mid = 4
mid - 1 = 3

-------------------------------TF(n + 1, mid - 1) 5의 왼쪽 자손
n = 4	<리턴>
end = 3

-------------------------------TF(mid, end) 5의 오른쪽 자손
n = 4	<리턴>
end = 3

--System.out.println(tree[n])-- //5의 양쪽 자손이 모두 없다면 출력하고 함수호출 종료
5출력

n = 2		24	//24의 함수 진행
end = 4
mid = 4
mid - 1 = 3

-------------------------------TF(mid, end) 24의 오른쪽 자손
n = 4		28
end = 4
mid = 5
mid - 1 = 4

-------------------------------TF(n + 1, mid - 1) 28의 왼쪽 자손
n = 4		28
end = 4
mid = 5
mid - 1 = 4

-------------------------------TF(n + 1, mid - 1) 28의 왼쪽 자손
n = 5	<리턴>
end = 4

-------------------------------TF(mid, end) 28의 오른쪽 자손
n = 5	<리턴>
end = 4

--System.out.println(tree[n])-- //28의 양쪽 자손이 모두 없다면 출력하고 함수호출 종료
28출력

n = 2		24	//24의 함수 진행
end = 4
mid = 4
mid - 1 = 3

--System.out.println(tree[n])-- //24의 모든 자손의 함수 호출이 끝났다면 출력하고 함수호출 종료
24출력

n = 1		30	//30의 함수 진행
end = 5
mid = 5
mid - 1 = 4

-------------------------------TF(mid, end) 30의 오른쪽 자손
n = 5		45
end = 5
mid = 6
mid - 1 = 5

-------------------------------TF(n + 1, mid - 1) 45의 왼쪽 자손
n = 5		45
end = 5
mid = 6
mid - 1 = 5

-------------------------------TF(n + 1, mid - 1) 45의 왼쪽 자손
n = 6	<리턴>
end = 5

-------------------------------TF(mid, end) 45의 오른쪽 자손
n = 6	<리턴>
end = 5

--System.out.println(tree[n])-- //45의 양쪽 자손이 모두 없다면 출력하고 함수호출 종료
45출력

n = 1		30	//30의 함수 진행
end = 5
mid = 5
mid - 1 = 4

--System.out.println(tree[n])-- //30의 모든 자손의 함수 호출이 끝났다면 출력하고 함수호출 종료
30출력

n = 0		50	//50의 함수 진행
end = 8
mid = 6
mid - 1 = 5

-------------------------------TF(mid, end) 50의 오른쪽 자손
n = 6		98
end = 8
mid = 9
mid - 1 = 8

-------------------------------TF(n + 1, mid - 1) 98의 왼쪽 자손
n = 7		52
end = 8
mid = 8
mid - 1 = 7

-------------------------------TF(n + 1, mid - 1) 52의 왼쪽 자손
n = 7		52
end = 8
mid = 8
mid - 1 = 7

-------------------------------TF(n + 1, mid - 1) 52의 왼쪽 자손
n = 8	<리턴>
end = 7

-------------------------------TF(mid, end) 52의 오른쪽 자손
n = 8		60
end = 8
mid = 9
mid - 1 = 8

-------------------------------TF(n + 1, mid - 1) 60의 왼쪽 자손
n = 8		60
end = 8
mid = 9
mid - 1 = 8

-------------------------------TF(n + 1, mid - 1) 60의 왼쪽 자손
n = 9	<리턴>
end = 8

-------------------------------TF(mid, end) 60의 오른쪽 자손
n = 9	<리턴>
end = 8

--System.out.println(tree[n])-- //60의 양쪽 자손이 모두 없다면 출력하고 함수호출 종료
60출력

n = 7		52	//52의 함수 진행
end = 8
mid = 8
mid - 1 = 7

--System.out.println(tree[n])-- //52의 모든 자손의 함수 호출이 끝났다면 출력하고 함수호출 종료
52출력

n = 6		98	//98의 함수 진행
end = 8
mid = 9
mid - 1 = 8

-------------------------------TF(mid, end) 98의 오른쪽 자손
n = 9	<리턴>
end = 8

--System.out.println(tree[n])-- //98의 모든 자손의 함수 호출이 끝났다면 출력하고 함수호출 종료
98출력

n = 0		50	//50의 함수 진행
end = 8
mid = 6
mid - 1 = 5

--System.out.println(tree[n])-- //50의 모든 자손의 함수 호출이 끝났다면 출력하고 함수호출 종료
50출력